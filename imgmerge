#!/usr/bin/sudo /bin/bash

basenames=$(wget -qO - https://appimage.github.io/apps | grep -Eo "<a href=\".*\">" | grep -v "github.com" | grep -v "twitter" | grep -v "opensuse" | grep -v "feed.xml" | cut -d "\"" -f2 | cut -d '/' -f2 | sed "/apps/d" | sed "/wishlist/d" | sed "/help/d" | sed "/^$/d" | tail -n+2)

#AppImage database directory
if [ ! -d /var/db/imgmerge ]; then
  mkdir -p /var/db/imgmerge
fi

#AppImage install directory
if [ ! -d /Applications ]; then
  mkdir /Applications
fi

if [ "$1" == "sync" ]; then
  #Build AppImage database
  for i in $basenames; do
    wget -qO - https://appimage.github.io/$i | grep "button green" | cut -d "\"" -f2
  done | tee /var/db/imgmerge/appimagelist
elif [ "$1" == "search" ]; then
  shift
  pkgs="$(for i in $@; do grep "$i" /var/db/imgmerge/appimagelist; done)"
  echo $pkgs
elif [ "$1" == "install" ]; then
  shift
  pkgs="$(for i in $@; do grep "$i" /var/db/imgmerge/appimagelist; done)"
  if [ -z "$pkgs" ]; then
    echo "Error: empty package list" && exit 137
  else
    for i in $pkgs; do
      domain=$(echo $i | cut -d "/" -f3)
      if [ "$domain" == "download.opensuse.org" ]; then
        appimage=https://$domain$(wget -qO - $i | grep "mirrorbrain-btn" | cut -d\" -f2 )
      else
        appimage=https://$domain$(wget -qO - $i | grep -v "\.com" | grep -v "\.org" | grep -Eo "/.*\.[Aa]pp[Ii]mage" | head -n1)
      fi
      wget -qO /Applications/$(echo $i | cut -d\/ -f5).AppImage --show-progress $appimage
      chmod a+x /Applications/$(echo $i | cut -d\/ -f5).AppImage
      cd /tmp
      /Applications/$(echo $i | cut -d\/ -f5).AppImage --appimage-extract
      icons_static=$(find -L squashfs-root/usr/share/icons -iname "*.png" | cut -d\/ -f2-)
      icons_scalable=$(find -L squashfs-root/usr/share/icons -iname "*.svg" | cut -d\/ -f2-)
      desktop_files=$(find -L squashfs-root/usr/share/applications -iname "*.desktop" | cut -d\/ -f2-)
      echo "Copying icons..."
      for j in $icons_static; do
        if [ -L $j ]; then
          file=$(file $j | cut -d' ' -f5)
          unlink $j
          mv $file $j
          file=$j
        else
          file=$j
        fi
        icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
        if [ ! -d $icon_dir_static ]; then
          mkdir -p $icon_dir_static
          cp squashfs-root/$file /$file
        else
          cp squashfs-root/$file /$file
        fi
      done
      for k in $icons_scalable; do
        if [ -L $k ]; then
          file=$(file $k | cut -d' ' -f5)
          unlink $k
          mv $file $k
          file=$k
        else
          file=$k
        fi
        icon_dir_scalable="/$(echo $j | rev | cut -d\/ -f2- | rev)"
        if [ ! -d $icon_dir_scalable ]; then
          mkdir -p $icon_dir_scalable
          cp squashfs-root/$file /$file
        else
          cp squashfs-root/$file /$file
        fi
      done
      echo "Copying and configuring .desktop files..."
      for l in $desktop_files; do
        if [ -L $l ]; then
          file=$(file $l | cut -d' ' -f5)
          unlink $l
          mv $file $l
          file=$l
        else
          file=$l
        fi
        cp squashfs-root/$file /$file
        sed -i "s/Exec=.*/Exec=\/Applications\/$(echo $i | cut -d\/ -f5).AppImage/" /$l
      done
      rm -rf squashfs-root
      echo "Successfully installed $i"
    done
  fi
elif [ "$1" == "remove" ]; then
  shift
  for i in $(ls /Applications | grep $@); do
    rm -f /Applications/$i
    rm -f $(grep -r "\.AppImage" /usr/share/applications | cut -d ':' -f1 | grep "$i")
  done
else
  echo "Usage: imgmerge [sync|search|install <packagenames>|remove <packagenames>]"
  echo "    sync: Build database of AppImages"
  echo "    search: Search for an AppImage in the database"
  echo "    install <packagenames>: Install AppImage by name"
  echo "    remove <packagenames>: Delete AppImage"
fi
