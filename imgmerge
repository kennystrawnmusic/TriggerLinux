#!/usr/bin/sudo /bin/bash

basenames=$(wget -qO - https://appimage.github.io/apps | grep -Eo "<a href=\".*\">" | grep -v "github.com" | grep -v "twitter" | grep -v "opensuse" | grep -v "feed.xml" | cut -d "\"" -f2 | cut -d '/' -f2 | sed "/apps/d" | sed "/wishlist/d" | sed "/help/d" | sed "/^$/d" | tail -n+2)

#AppImage database directory
if [ ! -d /var/db/imgmerge ]; then
  mkdir -p /var/db/imgmerge
fi

#AppImage install directory
if [ ! -d /Applications ]; then
  mkdir /Applications
fi

if [ "$1" == "build" ]; then
  #Build AppImage database
  for i in $basenames; do
    wget -qO - https://appimage.github.io/$i | grep "button green" | cut -d "\"" -f2
  done | tee /var/db/imgmerge/appimagelist
elif [ "$1" == "sync" ]; then
  for entry in $(cat /etc/imgmerge/fetch.conf); do
    wget -qO /var/db/imgmerge/appimagelist --show-progress $entry
  done
elif [ "$1" == "search" ]; then
  shift
  pkgs="$(for i in $@; do grep "$i" /var/db/imgmerge/appimagelist; done)"
  echo $pkgs
elif [ "$1" == "install" ]; then
  shift
  pkgs="$(for i in $@; do grep "$i" /var/db/imgmerge/appimagelist; done)"
  if [ -z "$pkgs" ]; then
    echo "Error: empty package list" && exit 137
  else
    for i in $pkgs; do
      domain=$(echo $i | cut -d "/" -f3)
      if [ "$domain" == "download.opensuse.org" ]; then
        appimage=https://$domain$(wget -qO - $i | grep "mirrorbrain-btn" | cut -d\" -f2 )
      elif [ "$domain" == "files.kde.org" ]; then
        filename=$(wget -qO - $i | grep -Eo "href=\".*\.[Aa]pp[Ii]mage\"" | cut -d\" -f2 | sort -Vr | head -n1)
        appimage=$i/$(echo $filename)
      elif [ "$domain" == "libreoffice.soluzioniopen.com" ]; then
        appimage=$i/LibreOffice-fresh.full-x86_64.AppImage
      else
        appimage=https://$domain$(wget -qO - $i | grep -v "\.com" | grep -v "\.org" | grep -Eo "/.*\.[Aa]pp[Ii]mage" | grep "$(uname -m)" | head -n1)
      fi
      if [[ "$i" == *"kdenlive"* ]]; then
        wget -qO /Applications/$(echo $i | cut -d\/ -f4).AppImage --show-progress $appimage
        chmod a+x /Applications/$(echo $i | cut -d\/ -f4).AppImage
        cd /tmp
        /Applications/$(echo $i | cut -d\/ -f4).AppImage --appimage-extract &>/dev/null
        icons_static=$(find squashfs-root/usr/share/icons -iname "*.png" | cut -d\/ -f2-)
        icons_scalable=$(find squashfs-root/usr/share/icons -iname "*.svg" | cut -d\/ -f2-)
        desktop_files=$(find squashfs-root -iname "*.desktop" | cut -d\/ -f2-)
        echo "Copying icons..."
        for j in $icons_static; do
          filebase=$(readlink squashfs-root/$j)
          if [ -n "$filebase" ]; then
            file="squashfs-root$filebase"
            unlink $j
            cp $file $j
            icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_static ]; then
              mkdir -p $icon_dir_static
              cp squashfs-root/$j /$j
            else
              cp squashfs-root/$j /$j
            fi
          else
            icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_static ]; then
              mkdir -p $icon_dir_static
              cp squashfs-root/$j /$j
            else
              cp squashfs-root/$j /$j
            fi
          fi
        done
        for k in $icons_scalable; do
          filebase=$(readlink squashfs-root/$k)
          if [ -n "$filebase" ]; then
            file="squashfs-root$filebase"
            unlink $k
            cp $file $k
            icon_dir_scalable="/$(echo $k | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_scalable ]; then
              mkdir -p $icon_dir_scalable
              cp squashfs-root/$k /$k
            else
              cp squashfs-root/$k /$k
            fi
          else
            icon_dir_scalable="/$(echo $k | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_scalable ]; then
              mkdir -p $icon_dir_scalable
              cp squashfs-root/$k /$k
            else
              cp squashfs-root/$k /$k
            fi
          fi
        done
        echo "Copying and configuring .desktop files..."
        for l in $desktop_files; do
          if [ -n "$(readlink $l)" ]; then
            cp -f squashfs-root$(readlink $l) /$l
          else
            if [ ! -d $(echo /$l | rev | cut -d\/ -f2- | rev) ]; then
              mkdir -p $(echo /$l | rev | cut -d\/ -f2- | rev)
            fi
            cp -rf squashfs-root/$l /$l
            sed -i "s/Exec=.*/Exec=\/Applications\/$(echo $i | cut -d'/' -f4).AppImage/" /$l 2>/dev/null
          fi
        done
        echo "Successfully installed $i"
      elif [[ "$i" == *"libreoffice"* ]]; then
        wget -qO /Applications/LibreOffice.AppImage --show-progress $appimage
        chmod a+x /Applications/LibreOffice.AppImage
        cd /tmp
        /Applications/LibreOffice.AppImage --appimage-extract &>/dev/null
        icons_static=$(find squashfs-root/usr/share/icons -iname "*.png" | cut -d\/ -f2-)
        icons_scalable=$(find squashfs-root/usr/share/icons -iname "*.svg" | cut -d\/ -f2-)
        desktop_files=$(find squashfs-root/usr/share/applications -iname "*.desktop" | cut -d\/ -f2-)
        echo "Copying icons..."
        for j in $icons_static; do
          filebase=$(readlink squashfs-root/$j)
          if [ -n "$filebase" ]; then
            file="squashfs-root$filebase"
            unlink $j
            cp $file $j
            icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_static ]; then
              mkdir -p $icon_dir_static
              cp squashfs-root/$j /$j
            else
              cp squashfs-root/$j /$j
            fi
          else
            icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_static ]; then
              mkdir -p $icon_dir_static
              cp squashfs-root/$j /$j
            else
              cp squashfs-root/$j /$j
            fi
          fi
        done
        for k in $icons_scalable; do
          filebase=$(readlink squashfs-root/$k)
          if [ -n "$filebase" ]; then
            file="squashfs-root$filebase"
            unlink $k
            cp $file $k
            icon_dir_scalable="/$(echo $k | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_scalable ]; then
              mkdir -p $icon_dir_scalable
              cp squashfs-root/$k /$k
            else
              cp squashfs-root/$k /$k
            fi
          else
            icon_dir_scalable="/$(echo $k | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_scalable ]; then
              mkdir -p $icon_dir_scalable
              cp squashfs-root/$k /$k
            else
              cp squashfs-root/$k /$k
            fi
          fi
        done
        echo "Copying and configuring .desktop files..."
        for l in $desktop_files; do
          cp squashfs-root$(readlink squashfs-root/$l) /$l || cp squashfs-root/$l /$l 2>/dev/null
          sed -i "s/Exec=.*/Exec=\/Applications\/LibreOffice.AppImage \-\-$(echo $l | cut -d\- -f2 | cut -d\. -f1)/" /$l
        done
        echo "Successfully installed $i"
      else
        wget -qO /Applications/$(echo $i | cut -d\/ -f5).AppImage --show-progress $appimage
        chmod a+x /Applications/$(echo $i | cut -d\/ -f5).AppImage
        cd /tmp
        /Applications/$(echo $i | cut -d\/ -f5).AppImage --appimage-extract &>/dev/null
        icons_static=$(find squashfs-root/usr/share/icons -iname "*.png" | cut -d\/ -f2-)
        icons_scalable=$(find squashfs-root/usr/share/icons -iname "*.svg" | cut -d\/ -f2-)
        desktop_files=$(find squashfs-root/usr/share/applications -iname "*.desktop" | cut -d\/ -f2-)
        echo "Copying icons..."
        for j in $icons_static; do
          filebase=$(readlink squashfs-root/$j)
          if [ -n "$filebase" ]; then
            file="squashfs-root$filebase"
            unlink $j
            cp $file $j
            icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_static ]; then
              mkdir -p $icon_dir_static
              cp squashfs-root/$j /$j
            else
              cp squashfs-root/$j /$j
            fi
          else
            icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_static ]; then
              mkdir -p $icon_dir_static
              cp squashfs-root/$j /$j
            else
              cp squashfs-root/$j /$j
            fi
          fi
        done
        for k in $icons_scalable; do
          filebase=$(readlink squashfs-root/$k)
          if [ -n "$filebase" ]; then
            file="squashfs-root$filebase"
            unlink $k
            cp $file $k
            icon_dir_scalable="/$(echo $k | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_scalable ]; then
              mkdir -p $icon_dir_scalable
              cp squashfs-root/$k /$k
            else
              cp squashfs-root/$k /$k
            fi
          else
            icon_dir_scalable="/$(echo $k | rev | cut -d\/ -f2- | rev)"
            if [ ! -d $icon_dir_scalable ]; then
              mkdir -p $icon_dir_scalable
              cp squashfs-root/$k /$k
            else
              cp squashfs-root/$k /$k
            fi
          fi
        done
        echo "Copying and configuring .desktop files..."
        for l in $desktop_files; do
          cp squashfs-root$(readlink squashfs-root/$l) /$l || cp squashfs-root/$l /$l 2>/dev/null
          sed -i "s/Exec=.*/Exec=\/Applications\/$(echo $i | cut -d'/' -f5).AppImage/" /$l
        done
        echo "Successfully installed $i"
      fi
    done
    rm -rf squashfs-root
  fi
elif [ "$1" == "sideload" ]; then
  shift
  pkgs="$(for i in $@; do ls | grep $i.*\.[Aa]pp[Ii]mage; done)"
  if [ -z "$pkgs" ]; then
    echo "Error: empty package list" && exit 137
  else
    for i in $pkgs; do
      appimage=$i
      cp $appimage /Applications/$(echo $i | cut -d'-' -f1).AppImage
      chmod a+x /Applications/$(echo $i | cut -d'-' -f1).AppImage
      cd /tmp
      /Applications/$(echo $i | cut -d'-' -f1).AppImage --appimage-extract &>/dev/null
      icons_static=$(find -L squashfs-root/usr/share/icons -iname "*.png" | cut -d\/ -f2-)
      icons_scalable=$(find -L squashfs-root/usr/share/icons -iname "*.svg" | cut -d\/ -f2-)
      desktop_files=$(find -L squashfs-root/usr/share/applications -iname "*.desktop" | cut -d\/ -f2-)
      echo "Copying icons..."
      for j in $icons_static; do
        filebase=$(readlink squashfs-root/$j)
        if [ -n "$filebase" ]; then
          file="squashfs-root$filebase"
          unlink $j
          cp $file $j
          icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
          if [ ! -d $icon_dir_static ]; then
            mkdir -p $icon_dir_static
            cp squashfs-root/$j /$j
          else
            cp squashfs-root/$j /$j
          fi
        else
          icon_dir_static="/$(echo $j | rev | cut -d\/ -f2- | rev)"
          if [ ! -d $icon_dir_static ]; then
            mkdir -p $icon_dir_static
            cp squashfs-root/$j /$j
          else
            cp squashfs-root/$j /$j
          fi
        fi
      done
      for k in $icons_scalable; do
        filebase=$(readlink squashfs-root/$k)
        if [ -n "$filebase" ]; then
          file="squashfs-root$filebase"
          unlink $k
          cp $file $k
          icon_dir_scalable="/$(echo $k | rev | cut -d\/ -f2- | rev)"
          if [ ! -d $icon_dir_scalable ]; then
            mkdir -p $icon_dir_scalable
            cp squashfs-root/$k /$k
          else
            cp squashfs-root/$k /$k
          fi
        else
          icon_dir_scalable="/$(echo $k | rev | cut -d\/ -f2- | rev)"
          if [ ! -d $icon_dir_scalable ]; then
            mkdir -p $icon_dir_scalable
            cp squashfs-root/$k /$k
          else
            cp squashfs-root/$k /$k
          fi
        fi
      done
      echo "Copying and configuring .desktop files..."
      for l in $desktop_files; do
        cp squashfs-root$(readlink squashfs-root/$l) /$l || cp squashfs-root/$l /$l 2>/dev/null
        sed -i "s/Exec=.*/Exec=\/Applications\/$(echo $i | cut -d'-' -f1).AppImage/" /$l
      done
      echo "Successfully installed $i"
    done
    rm -rf squashfs-root
  fi
elif [ "$1" == "remove" ]; then
  shift
  for i in $(ls /Applications | grep $@); do
    rm -f /Applications/$i
    rm -f $(grep -r "\.AppImage" /usr/share/applications | cut -d ':' -f1 | grep "$i")
  done
else
  echo "Usage: imgmerge [sync|search|install <packagenames>|remove <packagenames>]"
  echo "    build: Build database of AppImages"
  echo "    sync: Download database of AppImages"
  echo "    search: Search for an AppImage in the database"
  echo "    install <packagenames>: Install AppImages by name from the AppImageHub"
  echo "    sideload <packagenames>: Install AppImages by name from current working directory"
  echo "    remove <packagenames>: Delete AppImages"
fi
